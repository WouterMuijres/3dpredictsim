% This script extracts the CPU times from all simulations
% This allows filling Table S3
%
% Author: Antoine Falisse
% Date: 1/7/2019
%
clear all
close all
clc

% Common settings
pathmain = pwd;
[pathrepo,~,~] = fileparts(pathmain);
pathresults = [pathrepo,'/Results'];

%% PredSim_all
% All trials
ww = 1:198;
pathOCP = [pathrepo,'/OCP'];
addpath(genpath(pathOCP));
settings = getSettings_predSim_all();
% Load results
load([pathresults,'/PredSim_all/Results_all.mat']);
CPU_IPOPT_all.all   = zeros(1,length(ww));
CPU_NLP_all.all     = zeros(1,length(ww));
OptSol_all.all      = zeros(1,length(ww));
for k = 1:length(ww)    
v_tgt       = settings(ww(k),1);    % average speed
tol_ipopt   = settings(ww(k),2);    % tolerance (means 1e-(tol_ipopt))
N           = settings(ww(k),3);    % number of mesh intervals
W.E         = settings(ww(k),4);    % weight metabolic energy
W.Ak        = settings(ww(k),5);    % weight joint accelerations
W.ArmE      = settings(ww(k),6);    % weight arm excitations
W.passMom   = settings(ww(k),7);    % weight passive torques
W.A         = settings(ww(k),8);    % weight muscle activations
exp_E       = settings(ww(k),9);    % power metabolic energy
IGsel       = settings(ww(k),10);   % initial guess identifier
cm          = settings(ww(k),11);   % contact model identifier
IGm         = settings(ww(k),12);   % initial guess mode identifier
IGcase      = settings(ww(k),13);   % initial guess case identifier
h_weak      = settings(ww(k),14);   % weakness hip actuators
vMax_s      = settings(ww(k),15);   % maximal contraction velocity identifier
pf_weak     = settings(ww(k),16);   % weakness ankle plantaflexors
mE          = settings(ww(k),17);   % metabolic energy model identifier
coCont      = settings(ww(k),18);   % co-contraction identifier
v_tgt_id = round(v_tgt,2);     
CPU_NLP_all.all(ww(k)) = Results_all.(['Speed_',num2str(v_tgt_id*100)]). ...  
            (['W_MetabolicEnergyRate_',num2str(W.E)]). ...
            (['W_MuscleActivity_',num2str(W.A)]). ...            
            (['W_JointAcceleration_',num2str(W.Ak)]). ...
            (['W_PassiveTorque_',num2str(W.passMom)]). ...
            (['W_ArmExcitation_',num2str(W.ArmE)]). ...               
            (['Power_MetabolicEnergyRate_',num2str(exp_E)]). ...
            (['InitialGuessType_',num2str(IGsel)]). ...
            (['InitialGuessMode_',num2str(IGm)]). ...
            (['InitialGuessCase_',num2str(IGcase)]). ... 
            (['WeaknessHipActuators_',num2str(h_weak)]). ...
            (['WeaknessAnklePlantarflexors_',num2str(pf_weak)]). ...   
            (['MetabolicEnergyModel_',num2str(mE)]). ...            
            (['ContactModel_',num2str(cm)]). ...  
            (['Number_MeshIntervals_',num2str(N)]). ...
            (['MaximumContractionVelocity_',num2str(vMax_s)]). ...
            (['CoContraction_',num2str(coCont)]).CPU_NLP;
CPU_IPOPT_all.all(ww(k)) = Results_all.(['Speed_',num2str(v_tgt_id*100)]). ...  
            (['W_MetabolicEnergyRate_',num2str(W.E)]). ...
            (['W_MuscleActivity_',num2str(W.A)]). ...            
            (['W_JointAcceleration_',num2str(W.Ak)]). ...
            (['W_PassiveTorque_',num2str(W.passMom)]). ...
            (['W_ArmExcitation_',num2str(W.ArmE)]). ...               
            (['Power_MetabolicEnergyRate_',num2str(exp_E)]). ...
            (['InitialGuessType_',num2str(IGsel)]). ...
            (['InitialGuessMode_',num2str(IGm)]). ...
            (['InitialGuessCase_',num2str(IGcase)]). ... 
            (['WeaknessHipActuators_',num2str(h_weak)]). ...
            (['WeaknessAnklePlantarflexors_',num2str(pf_weak)]). ...   
            (['MetabolicEnergyModel_',num2str(mE)]). ...            
            (['ContactModel_',num2str(cm)]). ...  
            (['Number_MeshIntervals_',num2str(N)]). ...
            (['MaximumContractionVelocity_',num2str(vMax_s)]). ...
            (['CoContraction_',num2str(coCont)]).CPU_IPOPT;
OptSol_all.all(ww(k)) = Results_all.(['Speed_',num2str(v_tgt_id*100)]). ...  
            (['W_MetabolicEnergyRate_',num2str(W.E)]). ...
            (['W_MuscleActivity_',num2str(W.A)]). ...            
            (['W_JointAcceleration_',num2str(W.Ak)]). ...
            (['W_PassiveTorque_',num2str(W.passMom)]). ...
            (['W_ArmExcitation_',num2str(W.ArmE)]). ...               
            (['Power_MetabolicEnergyRate_',num2str(exp_E)]). ...
            (['InitialGuessType_',num2str(IGsel)]). ...
            (['InitialGuessMode_',num2str(IGm)]). ...
            (['InitialGuessCase_',num2str(IGcase)]). ... 
            (['WeaknessHipActuators_',num2str(h_weak)]). ...
            (['WeaknessAnklePlantarflexors_',num2str(pf_weak)]). ...   
            (['MetabolicEnergyModel_',num2str(mE)]). ...            
            (['ContactModel_',num2str(cm)]). ...  
            (['Number_MeshIntervals_',num2str(N)]). ...
            (['MaximumContractionVelocity_',num2str(vMax_s)]). ...
            (['CoContraction_',num2str(coCont)]).OptSol;
end
% Check for convergence
OptSol_all_s = sum(OptSol_all.all);
OptSol_all_conv = OptSol_all_s == length(ww);
trialNoConv_all = [];
if OptSol_all_conv
    disp('All cases: all problems converged');
else
    temp = length(ww) - OptSol_all_s;
    disp(['All cases: ',num2str(temp),' problems did not converge']);
    trialNoConv_all = ww(OptSol_all.all==0);
end

%% PredSim_prosthesis
load([pathresults,'/PredSim_prosthesis/Results_prosthesis.mat']);
% All trials
ww = 1:2;
settings = [        
    % Data-informed (walking) initial guess
    1.33, 4, 100, 500, 50000, 1000000, 1000, 2000, 2, 2, 1, 1, 0, 0, 0, 0, 0, 800;   % 1
    % Quasi-random initial guess
    1.33, 4, 100, 500, 50000, 1000000, 1000, 2000, 2, 1, 1, 0, 0, 0, 0, 0, 0, 800;   % 2
    ];
% Load results
CPU_IPOPT_prosthesis.all   = zeros(1,length(ww));
CPU_NLP_prosthesis.all     = zeros(1,length(ww));
OptSol_prosthesis.all          = zeros(1,length(ww));
for k = 1:length(ww)    
v_tgt       = settings(ww(k),1);    % target velocity
tol_ipopt   = settings(ww(k),2);    % tolerance (means 1e-(tol_ipopt))
N           = settings(ww(k),3);    % number of mesh intervals
W.E         = settings(ww(k),4);    % weight metabolic energy
W.Ak        = settings(ww(k),5);    % weight joint accelerations
W.ArmE      = settings(ww(k),6);    % weight arm excitations
W.passMom   = settings(ww(k),7);    % weight passive moments
W.A         = settings(ww(k),8);    % weight muscle activations
exp_E       = settings(ww(k),9);    % power metabolic energy
IGsel       = settings(ww(k),10);   % initial guess selection
cm          = settings(ww(k),11);   % contact model
IGm         = settings(ww(k),12);   % initial guess mode
IGcase      = settings(ww(k),13);   % initial guess case
h_weak      = settings(ww(k),14);   % h_weakness hip actuators
vMax_s      = settings(ww(k),15);   % maximal contraction velocity
pf_weak     = settings(ww(k),16);   % weakness ankle plantaflexors
mE          = settings(ww(k),17);   % metabolic energy model identifier
kstiff      = settings(ww(k),18);   % prosthesis stiffness
% Fixed parameters
W.u = 0.001;
% The filename used to save the results depends on the settings 
v_tgt_id = round(v_tgt,2);
savename = ['_c',num2str(ww(k)),'_v',num2str(v_tgt_id*100),...
    '_T',num2str(tol_ipopt),'_N',num2str(N),'_E',num2str(W.E),...
    '_Ak',num2str(W.Ak),'_AE',num2str(W.ArmE),'_P',num2str(W.passMom),...
    '_A',num2str(W.A),'_eE',num2str(exp_E),'_G',num2str(IGsel),...
    '_M',num2str(cm),'_Gm',num2str(IGm),...
    '_W',num2str(h_weak),'_vM',num2str(vMax_s),...
    '_pW',num2str(pf_weak),'_mE',num2str(mE),'_k',num2str(kstiff)];
v_tgt_id = round(v_tgt,2);     
CPU_NLP_prosthesis.all(ww(k)) = Results_prosthesis. ...
            (['Speed_',num2str(v_tgt_id*100)]). ...  
            (['W_MetabolicEnergyRate_',num2str(W.E)]). ...
            (['W_MuscleActivity_',num2str(W.A)]). ...            
            (['W_JointAcceleration_',num2str(W.Ak)]). ...
            (['W_PassiveTorque_',num2str(W.passMom)]). ...
            (['W_ArmExcitation_',num2str(W.ArmE)]). ...               
            (['Power_MetabolicEnergyRate_',num2str(exp_E)]). ...
            (['InitialGuessType_',num2str(IGsel)]). ...
            (['InitialGuessMode_',num2str(IGm)]). ...
            (['InitialGuessCase_',num2str(IGcase)]). ... 
            (['WeaknessHipActuators_',num2str(h_weak)]). ...
            (['WeaknessAnklePlantarflexors_',num2str(pf_weak)]). ...   
            (['MetabolicEnergyModel_',num2str(mE)]). ...            
            (['ContactModel_',num2str(cm)]). ...  
            (['Number_MeshIntervals_',num2str(N)]). ...
            (['MaximumContractionVelocity_',num2str(vMax_s)]). ...
            (['Stiffness_',num2str(kstiff)]).CPU_NLP;
CPU_IPOPT_prosthesis.all(ww(k)) = Results_prosthesis. ...
            (['Speed_',num2str(v_tgt_id*100)]). ...  
            (['W_MetabolicEnergyRate_',num2str(W.E)]). ...
            (['W_MuscleActivity_',num2str(W.A)]). ...            
            (['W_JointAcceleration_',num2str(W.Ak)]). ...
            (['W_PassiveTorque_',num2str(W.passMom)]). ...
            (['W_ArmExcitation_',num2str(W.ArmE)]). ...               
            (['Power_MetabolicEnergyRate_',num2str(exp_E)]). ...
            (['InitialGuessType_',num2str(IGsel)]). ...
            (['InitialGuessMode_',num2str(IGm)]). ...
            (['InitialGuessCase_',num2str(IGcase)]). ... 
            (['WeaknessHipActuators_',num2str(h_weak)]). ...
            (['WeaknessAnklePlantarflexors_',num2str(pf_weak)]). ...   
            (['MetabolicEnergyModel_',num2str(mE)]). ...            
            (['ContactModel_',num2str(cm)]). ...  
            (['Number_MeshIntervals_',num2str(N)]). ...
            (['MaximumContractionVelocity_',num2str(vMax_s)]). ...
            (['Stiffness_',num2str(kstiff)]).CPU_IPOPT;
OptSol_prosthesis.all(ww(k)) = Results_prosthesis. ...
            (['Speed_',num2str(v_tgt_id*100)]). ...  
            (['W_MetabolicEnergyRate_',num2str(W.E)]). ...
            (['W_MuscleActivity_',num2str(W.A)]). ...            
            (['W_JointAcceleration_',num2str(W.Ak)]). ...
            (['W_PassiveTorque_',num2str(W.passMom)]). ...
            (['W_ArmExcitation_',num2str(W.ArmE)]). ...               
            (['Power_MetabolicEnergyRate_',num2str(exp_E)]). ...
            (['InitialGuessType_',num2str(IGsel)]). ...
            (['InitialGuessMode_',num2str(IGm)]). ...
            (['InitialGuessCase_',num2str(IGcase)]). ... 
            (['WeaknessHipActuators_',num2str(h_weak)]). ...
            (['WeaknessAnklePlantarflexors_',num2str(pf_weak)]). ...   
            (['MetabolicEnergyModel_',num2str(mE)]). ...            
            (['ContactModel_',num2str(cm)]). ...  
            (['Number_MeshIntervals_',num2str(N)]). ...
            (['MaximumContractionVelocity_',num2str(vMax_s)]). ...
            (['Stiffness_',num2str(kstiff)]).OptSol;
end

% Check for convergence 
OptSol_prosthesis_s = sum(OptSol_prosthesis.all);
OptSol_prosthesis_conv = OptSol_prosthesis_s == length(ww);
trialNoConv_prosthesis = [];
if OptSol_prosthesis_conv
    disp('Prosthesis case: all problems converged');
else
    temp = length(ww) - OptSol_prosthesis_s;
    disp(['Prosthesis case: ',num2str(temp),' problems did not converge']);
    trialNoConv_prosthesis = ww(OptSol_prosthesis.all==0);
end

%% CPU times
CPU_tot_all.all = CPU_IPOPT_all.all + CPU_NLP_all.all;
% 50 mesh intervals (remove trials that did not converge)
idx_100 = [116,117];
idx_50 = 1:198;
idx_50([idx_100,trialNoConv_all]) = [];
temp_50 = CPU_tot_all.all(idx_50);
CPU_50.mean = round(mean(temp_50)/60);
CPU_50.std = round(std(temp_50)/60);
% Preferred walking speed
% Nominal cost function: 1,22
idx_ncf = [1,22];
temp_cnf = CPU_tot_all.all(idx_ncf);
CPU_ncf.mean = round(mean(temp_cnf)/60);
CPU_ncf.std = round(std(temp_cnf)/60);
% Alternative cost functions
% No metabolic energy rate term: 104,105
idx_nmert = [104,105];
temp_nmert = CPU_tot_all.all(idx_nmert);
CPU_nmert.mean = round(mean(temp_nmert)/60);
CPU_nmert.std = round(std(temp_nmert)/60);
% No muscle activity term: 106,107
idx_nmat = [106,107];
temp_nmat = CPU_tot_all.all(idx_nmat);
CPU_nmat.mean = round(mean(temp_nmat)/60);
CPU_nmat.std = round(std(temp_nmat)/60);
% Not squaring metabolic energy rate term: 108,109
idx_nsmert = [108,109];
temp_nsmert = CPU_tot_all.all(idx_nsmert);
CPU_nsmert.mean = round(mean(temp_nsmert)/60);
CPU_nsmert.std = round(std(temp_nsmert)/60);
% No passive torque term: 110,111
idx_nptt = [110,111];
temp_nptt = CPU_tot_all.all(idx_nptt);
CPU_nptt.mean = round(mean(temp_nptt)/60);
CPU_nptt.std = round(std(temp_nptt)/60);
% Decreased weight on joint acceleration term 112,113
idx_dwjat = [112,113];
temp_dwjat = CPU_tot_all.all(idx_dwjat);
CPU_dwjat.mean = round(mean(temp_dwjat)/60);
CPU_dwjat.std = round(std(temp_dwjat)/60);
% Muscle strength deficits
% Weak hip muscles: 118:123
idx_wha = 118:123;
temp_wha = CPU_tot_all.all(idx_wha);
CPU_wha.mean = round(mean(temp_wha)/60);
CPU_wha.std = round(std(temp_wha)/60);
% Weak ankle plantarflexors: 177:182
idx_wapf = 177:182;
temp_wapf = CPU_tot_all.all(idx_wapf);
CPU_wapf.mean = round(mean(temp_wapf)/60);
CPU_wapf.std = round(std(temp_wapf)/60);
% Sensitivity analyses
% Different metabolic energy models: 183:192
idx_dme = 183:192;
temp_dme = CPU_tot_all.all(idx_dme);
CPU_dme.mean = round(mean(temp_dme)/60);
CPU_dme.std = round(std(temp_dme)/60);
% Optimized contact models: 114:115
idx_ocm = 114:115;
temp_ocm = CPU_tot_all.all(idx_ocm);
CPU_ocm.mean = round(mean(temp_ocm)/60);
CPU_ocm.std = round(std(temp_ocm)/60);
% Co-contraction: 193:198
idx_cc = 193:198;
temp_cc = CPU_tot_all.all(idx_cc);
CPU_cc.mean = round(mean(temp_cc)/60);
CPU_cc.std = round(std(temp_cc)/60);
% Different speeds
% Nominal cost function: 2:21,23:70,72:76,78:82,84:103
% (remove trials that did not converge)
idx_ds = [2:21,23:70,72:76,78:82,84:103];
temp_ds = CPU_tot_all.all(idx_ds);
CPU_ds.mean = round(mean(temp_ds)/60);
CPU_ds.std = round(std(temp_ds)/60);
% Increased maximum muscle contraction velocities: 124:160,162:176
% (remove trials that did not converge)
idx_immcv = [124:160,162:176];
temp_immcv = CPU_tot_all.all(idx_immcv);
CPU_immcv.mean = round(mean(temp_immcv)/60);
CPU_immcv.std = round(std(temp_immcv)/60);
% 100 mesh intervals
% Nominal cost function: 116,117 
idx_100_ncf = [116,117];
temp_100_ncf = CPU_tot_all.all(idx_100_ncf);
CPU_100_ncf.mean = round(mean(temp_100_ncf)/60);
CPU_100_ncf.std = round(std(temp_100_ncf)/60);
% Passive transtibial prosthesis
CPU_tot_prosthesis.all = CPU_IPOPT_prosthesis.all + CPU_NLP_prosthesis.all;
idx_ptp = [1,2];
temp_ptp = CPU_tot_prosthesis.all(idx_ptp);
CPU_ptp.mean = round(mean(temp_ptp)/60);
CPU_ptp.std = round(std(temp_ptp)/60);
% All 100 mesh intervals
temp_100 = [temp_100_ncf,temp_ptp];
CPU_100.mean = round(mean(temp_100)/60);
CPU_100.std = round(std(temp_100)/60);
% Average CPU time all + prosthesis
temp_all = CPU_tot_all.all;
temp_all(trialNoConv_all) = [];
temp_prosthesis = CPU_tot_prosthesis.all;
temp_prosthesis(trialNoConv_prosthesis) = [];
temp_all_prosthesis = [temp_all,temp_prosthesis];
CPU_tot_all_prosthesis.mean = round(mean(temp_all_prosthesis)/60);
CPU_tot_all_prosthesis.std = round(std(temp_all_prosthesis)/60);
% IPOPT
temp_IPOPT_all = CPU_IPOPT_all.all;
temp_IPOPT_all(trialNoConv_all) = [];
temp_IPOPT_prosthesis = CPU_IPOPT_prosthesis.all;
temp_IPOPT_prosthesis(trialNoConv_prosthesis) = [];
temp_IPOPT_all_prosthesis = [temp_IPOPT_all,temp_IPOPT_prosthesis];
CPU_IPOPT_all_prosthesis.mean = round(mean(temp_IPOPT_all_prosthesis)/60);
CPU_IPOPT_all_prosthesis.std = round(std(temp_IPOPT_all_prosthesis)/60);
% NLP
temp_NLP_all = CPU_NLP_all.all;
temp_NLP_all(trialNoConv_all) = [];
temp_NLP_prosthesis = CPU_NLP_prosthesis.all;
temp_NLP_prosthesis(trialNoConv_prosthesis) = [];
temp_NLP_all_prosthesis = [temp_NLP_all,temp_NLP_prosthesis];
CPU_NLP_all_prosthesis.mean = round(mean(temp_NLP_all_prosthesis)/60);
CPU_NLP_all_prosthesis.std = round(std(temp_NLP_all_prosthesis)/60);

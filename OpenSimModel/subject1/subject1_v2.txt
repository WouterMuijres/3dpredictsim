// OpenSim: create components
/// Model
OpenSim::Model* model;
/// Bodies
OpenSim::Body* pelvis;
OpenSim::Body* femur_r;
OpenSim::Body* tibia_r;
OpenSim::Body* talus_r;
OpenSim::Body* calcn_r;
OpenSim::Body* toes_r;
OpenSim::Body* femur_l;
OpenSim::Body* tibia_l;
OpenSim::Body* talus_l;
OpenSim::Body* calcn_l;
OpenSim::Body* toes_l;
OpenSim::Body* torso;
OpenSim::Body* humerus_r;
OpenSim::Body* ulna_r;
OpenSim::Body* radius_r;
OpenSim::Body* hand_r;
OpenSim::Body* humerus_l;
OpenSim::Body* ulna_l;
OpenSim::Body* radius_l;
OpenSim::Body* hand_l;
/// Joints
OpenSim::CustomJoint* ground_pelvis;
OpenSim::CustomJoint* hip_r;
OpenSim::CustomJoint* knee_r;
OpenSim::CustomJoint* ankle_r;
OpenSim::CustomJoint* subtalar_r;
OpenSim::WeldJoint* mtp_r;
OpenSim::CustomJoint* hip_l;
OpenSim::CustomJoint* knee_l;
OpenSim::CustomJoint* ankle_l;
OpenSim::CustomJoint* subtalar_l;
OpenSim::WeldJoint* mtp_l;
OpenSim::CustomJoint* back;
OpenSim::CustomJoint* shoulder_r;
OpenSim::CustomJoint* elbow_r;
OpenSim::CustomJoint* radioulnar_r;
OpenSim::WeldJoint* radius_hand_r;
OpenSim::CustomJoint* shoulder_l;
OpenSim::CustomJoint* elbow_l;
OpenSim::CustomJoint* radioulnar_l;
OpenSim::WeldJoint* radius_hand_l;
/// Model
model = new OpenSim::Model();
/// Bodies
pelvis= new OpenSim::Body("pelvis",8.8426, Vec3(-0.068278,0,0), Inertia(0.07418,0.07418,0.040546,0,0,0));
model->addBody(pelvis);
femur_r= new OpenSim::Body("femur_r",6.9838, Vec3(0,-0.17047,0), Inertia(0.10109,0.026499,0.1066,0,0,0));
model->addBody(femur_r);
tibia_r= new OpenSim::Body("tibia_r",2.7837, Vec3(0,-0.18049,0), Inertia(0.035366,0.0035787,0.035857,0,0,0));
model->addBody(tibia_r);
talus_r= new OpenSim::Body("talus_r",0.075084, Vec3(0,0,0), Inertia(0.00062714,0.00062714,0.00062714,0,0,0));
model->addBody(talus_r);
calcn_r= new OpenSim::Body("calcn_r",0.93854, Vec3(0.091392,0.027418,0), Inertia(0.000878,0.0024459,0.0025713,0,0,0));
model->addBody(calcn_r);
toes_r= new OpenSim::Body("toes_r",0.16263, Vec3(0.031622,0.0054836,-0.015994), Inertia(6.2714e-05,0.00012543,6.2714e-05,0,0,0));
model->addBody(toes_r);
femur_l= new OpenSim::Body("femur_l",6.9838, Vec3(0,-0.17047,0), Inertia(0.10109,0.026499,0.1066,0,0,0));
model->addBody(femur_l);
tibia_l= new OpenSim::Body("tibia_l",2.7837, Vec3(0,-0.18049,0), Inertia(0.035366,0.0035787,0.035857,0,0,0));
model->addBody(tibia_l);
talus_l= new OpenSim::Body("talus_l",0.075084, Vec3(0,0,0), Inertia(0.00062714,0.00062714,0.00062714,0,0,0));
model->addBody(talus_l);
calcn_l= new OpenSim::Body("calcn_l",0.93854, Vec3(0.091392,0.027418,0), Inertia(0.000878,0.0024459,0.0025713,0,0,0));
model->addBody(calcn_l);
toes_l= new OpenSim::Body("toes_l",0.16263, Vec3(0.031622,0.0054836,0.015994), Inertia(6.2714e-05,0.00012543,6.2714e-05,0,0,0));
model->addBody(toes_l);
torso= new OpenSim::Body("torso",25.7061, Vec3(-0.02676,0.30651,0), Inertia(0.98117,0.45135,0.98117,0,0,0));
model->addBody(torso);
humerus_r= new OpenSim::Body("humerus_r",1.5261, Vec3(0,-0.16903,0), Inertia(0.0094704,0.003267,0.01063,0,0,0));
model->addBody(humerus_r);
ulna_r= new OpenSim::Body("ulna_r",0.45613, Vec3(0,-0.11828,0), Inertia(0.0021417,0.00044685,0.0023232,0,0,0));
model->addBody(ulna_r);
radius_r= new OpenSim::Body("radius_r",0.45613, Vec3(0,-0.11828,0), Inertia(0.0021417,0.00044685,0.0023232,0,0,0));
model->addBody(radius_r);
hand_r= new OpenSim::Body("hand_r",0.34351, Vec3(0,-0.066824,0), Inertia(0.00064497,0.00039552,0.00096891,0,0,0));
model->addBody(hand_r);
humerus_l= new OpenSim::Body("humerus_l",1.5261, Vec3(0,-0.16903,0), Inertia(0.0094704,0.003267,0.01063,0,0,0));
model->addBody(humerus_l);
ulna_l= new OpenSim::Body("ulna_l",0.45613, Vec3(0,-0.11828,0), Inertia(0.0021417,0.00044685,0.0023232,0,0,0));
model->addBody(ulna_l);
radius_l= new OpenSim::Body("radius_l",0.45613, Vec3(0,-0.11828,0), Inertia(0.0021417,0.00044685,0.0023232,0,0,0));
model->addBody(radius_l);
hand_l= new OpenSim::Body("hand_l",0.34351, Vec3(0,-0.066824,0), Inertia(0.00064497,0.00039552,0.00096891,0,0,0));
model->addBody(hand_l);
/// Joints
//ground_pelvis
SpatialTransform st_ground_pelvis;
st_ground_pelvis[0].setCoordinateNames(OpenSim::Array<std::string>("pelvis_tilt", 1, 1));
st_ground_pelvis[0].setFunction(new LinearFunction());
st_ground_pelvis[0].setAxis(Vec3(0,0,1));
st_ground_pelvis[1].setCoordinateNames(OpenSim::Array<std::string>("pelvis_list", 1, 1));
st_ground_pelvis[1].setFunction(new LinearFunction());
st_ground_pelvis[1].setAxis(Vec3(1,0,0));
st_ground_pelvis[2].setCoordinateNames(OpenSim::Array<std::string>("pelvis_rotation", 1, 1));
st_ground_pelvis[2].setFunction(new LinearFunction());
st_ground_pelvis[2].setAxis(Vec3(0,1,0));
st_ground_pelvis[3].setCoordinateNames(OpenSim::Array<std::string>("pelvis_tx", 1, 1));
st_ground_pelvis[3].setFunction(new LinearFunction());
st_ground_pelvis[3].setAxis(Vec3(1,0,0));
st_ground_pelvis[4].setCoordinateNames(OpenSim::Array<std::string>("pelvis_ty", 1, 1));
st_ground_pelvis[4].setFunction(new LinearFunction());
st_ground_pelvis[4].setAxis(Vec3(0,1,0));
st_ground_pelvis[5].setCoordinateNames(OpenSim::Array<std::string>("pelvis_tz", 1, 1));
st_ground_pelvis[5].setFunction(new LinearFunction());
st_ground_pelvis[5].setAxis(Vec3(0,0,1));
ground_pelvis = new CustomJoint("ground_pelvis", model->getGround(), Vec3(0,0,0), Vec3(0,0,0), *pelvis, Vec3(0,0,0), Vec3(0,0,0),st_ground_pelvis);
//hip_r
SpatialTransform st_hip_r;
st_hip_r[0].setCoordinateNames(OpenSim::Array<std::string>("hip_flexion_r", 1, 1));
st_hip_r[0].setFunction(new LinearFunction());
st_hip_r[0].setAxis(Vec3(0,0,1));
st_hip_r[1].setCoordinateNames(OpenSim::Array<std::string>("hip_adduction_r", 1, 1));
st_hip_r[1].setFunction(new LinearFunction());
st_hip_r[1].setAxis(Vec3(1,0,0));
st_hip_r[2].setCoordinateNames(OpenSim::Array<std::string>("hip_rotation_r", 1, 1));
st_hip_r[2].setFunction(new LinearFunction());
st_hip_r[2].setAxis(Vec3(0,1,0));
st_hip_r[3].setFunction(new MultiplierFunction(new Constant(0), 0.96574));
st_hip_r[3].setAxis(Vec3(1,0,0));
st_hip_r[4].setFunction(new MultiplierFunction(new Constant(0), 0.96574));
st_hip_r[4].setAxis(Vec3(0,1,0));
st_hip_r[5].setFunction(new MultiplierFunction(new Constant(0), 0.986));
st_hip_r[5].setAxis(Vec3(0,0,1));
hip_r = new CustomJoint("hip_r", *pelvis, Vec3(-0.068278,-0.063835,0.082331), Vec3(0,0,0), *femur_r, Vec3(0,0,0), Vec3(0,0,0),st_hip_r);
//knee_r
SpatialTransform st_knee_r;
st_knee_r[0].setCoordinateNames(OpenSim::Array<std::string>("knee_angle_r", 1, 1));
st_knee_r[0].setFunction(new LinearFunction());
st_knee_r[0].setAxis(Vec3(0,0,1));
st_knee_r[1].setFunction(new Constant(0));
st_knee_r[1].setAxis(Vec3(0,1,0));
st_knee_r[2].setFunction(new Constant(0));
st_knee_r[2].setAxis(Vec3(1,0,0));
st_knee_r[3].setFunction(new MultiplierFunction(new Constant(0), 1.0027));
st_knee_r[3].setAxis(Vec3(1,0,0));
st_knee_r[4].setFunction(new MultiplierFunction(new Constant(0), 1.0027));
st_knee_r[4].setAxis(Vec3(0,1,0));
st_knee_r[5].setFunction(new MultiplierFunction(new Constant(0), 1.0027));
st_knee_r[5].setAxis(Vec3(0,0,1));
knee_r = new CustomJoint("knee_r", *femur_r, Vec3(-0.0045122,-0.39691,0), Vec3(0,0,0), *tibia_r, Vec3(0,0,0), Vec3(0,0,0),st_knee_r);
//ankle_r
SpatialTransform st_ankle_r;
st_ankle_r[0].setCoordinateNames(OpenSim::Array<std::string>("ankle_angle_r", 1, 1));
st_ankle_r[0].setFunction(new LinearFunction());
st_ankle_r[0].setAxis(Vec3(-0.10501,-0.17402,0.97913));
st_ankle_r[1].setFunction(new Constant(0));
st_ankle_r[1].setAxis(Vec3(0,1,0));
st_ankle_r[2].setFunction(new Constant(0));
st_ankle_r[2].setAxis(Vec3(0.97913,0,0.10501));
st_ankle_r[3].setFunction(new MultiplierFunction(new Constant(0), 0.96673));
st_ankle_r[3].setAxis(Vec3(1,0,0));
st_ankle_r[4].setFunction(new MultiplierFunction(new Constant(0), 0.96673));
st_ankle_r[4].setAxis(Vec3(0,1,0));
st_ankle_r[5].setFunction(new MultiplierFunction(new Constant(0), 0.96673));
st_ankle_r[5].setAxis(Vec3(0,0,1));
ankle_r = new CustomJoint("ankle_r", *tibia_r, Vec3(0,-0.41569,0), Vec3(0,0,0), *talus_r, Vec3(0,0,0), Vec3(0,0,0),st_ankle_r);
//subtalar_r
SpatialTransform st_subtalar_r;
st_subtalar_r[0].setCoordinateNames(OpenSim::Array<std::string>("subtalar_angle_r", 1, 1));
st_subtalar_r[0].setFunction(new LinearFunction());
st_subtalar_r[0].setAxis(Vec3(0.78718,0.60475,-0.12095));
st_subtalar_r[1].setFunction(new Constant(0));
st_subtalar_r[1].setAxis(Vec3(0,1,0));
st_subtalar_r[2].setFunction(new Constant(0));
st_subtalar_r[2].setAxis(Vec3(-0.12095,0,-0.78718));
st_subtalar_r[3].setFunction(new MultiplierFunction(new Constant(0), 0.91392));
st_subtalar_r[3].setAxis(Vec3(1,0,0));
st_subtalar_r[4].setFunction(new MultiplierFunction(new Constant(0), 0.91392));
st_subtalar_r[4].setAxis(Vec3(0,1,0));
st_subtalar_r[5].setFunction(new MultiplierFunction(new Constant(0), 0.91392));
st_subtalar_r[5].setAxis(Vec3(0,0,1));
subtalar_r = new CustomJoint("subtalar_r", *talus_r, Vec3(-0.044572,-0.038339,0.0072383), Vec3(0,0,0), *calcn_r, Vec3(0,0,0), Vec3(0,0,0),st_subtalar_r);
//mtp_r
mtp_r = new WeldJoint("mtp_r", *calcn_r, Vec3(0.16341,-0.0018278,0.00098704), Vec3(0,0,0), *toes_r, Vec3(0,0,0), Vec3(0,0,0));
//hip_l
SpatialTransform st_hip_l;
st_hip_l[0].setCoordinateNames(OpenSim::Array<std::string>("hip_flexion_l", 1, 1));
st_hip_l[0].setFunction(new LinearFunction());
st_hip_l[0].setAxis(Vec3(0,0,1));
st_hip_l[1].setCoordinateNames(OpenSim::Array<std::string>("hip_adduction_l", 1, 1));
st_hip_l[1].setFunction(new LinearFunction());
st_hip_l[1].setAxis(Vec3(-1,0,0));
st_hip_l[2].setCoordinateNames(OpenSim::Array<std::string>("hip_rotation_l", 1, 1));
st_hip_l[2].setFunction(new LinearFunction());
st_hip_l[2].setAxis(Vec3(0,-1,0));
st_hip_l[3].setFunction(new MultiplierFunction(new Constant(0), 0.96574));
st_hip_l[3].setAxis(Vec3(1,0,0));
st_hip_l[4].setFunction(new MultiplierFunction(new Constant(0), 0.96574));
st_hip_l[4].setAxis(Vec3(0,1,0));
st_hip_l[5].setFunction(new MultiplierFunction(new Constant(0), 0.986));
st_hip_l[5].setAxis(Vec3(0,0,1));
hip_l = new CustomJoint("hip_l", *pelvis, Vec3(-0.068278,-0.063835,-0.082331), Vec3(0,0,0), *femur_l, Vec3(0,0,0), Vec3(0,0,0),st_hip_l);
//knee_l
SpatialTransform st_knee_l;
st_knee_l[0].setCoordinateNames(OpenSim::Array<std::string>("knee_angle_l", 1, 1));
st_knee_l[0].setFunction(new LinearFunction());
st_knee_l[0].setAxis(Vec3(0,0,1));
st_knee_l[1].setFunction(new Constant(0));
st_knee_l[1].setAxis(Vec3(0,1,0));
st_knee_l[2].setFunction(new Constant(0));
st_knee_l[2].setAxis(Vec3(1,0,0));
st_knee_l[3].setFunction(new MultiplierFunction(new Constant(0), 1.0027));
st_knee_l[3].setAxis(Vec3(1,0,0));
st_knee_l[4].setFunction(new MultiplierFunction(new Constant(0), 1.0027));
st_knee_l[4].setAxis(Vec3(0,1,0));
st_knee_l[5].setFunction(new MultiplierFunction(new Constant(0), 1.0027));
st_knee_l[5].setAxis(Vec3(0,0,1));
knee_l = new CustomJoint("knee_l", *femur_l, Vec3(-0.0045122,-0.39691,0), Vec3(0,0,0), *tibia_l, Vec3(0,0,0), Vec3(0,0,0),st_knee_l);
//ankle_l
SpatialTransform st_ankle_l;
st_ankle_l[0].setCoordinateNames(OpenSim::Array<std::string>("ankle_angle_l", 1, 1));
st_ankle_l[0].setFunction(new LinearFunction());
st_ankle_l[0].setAxis(Vec3(0.10501,0.17402,0.97913));
st_ankle_l[1].setFunction(new Constant(0));
st_ankle_l[1].setAxis(Vec3(0,1,0));
st_ankle_l[2].setFunction(new Constant(0));
st_ankle_l[2].setAxis(Vec3(0.97913,0,-0.10501));
st_ankle_l[3].setFunction(new MultiplierFunction(new Constant(0), 0.96673));
st_ankle_l[3].setAxis(Vec3(1,0,0));
st_ankle_l[4].setFunction(new MultiplierFunction(new Constant(0), 0.96673));
st_ankle_l[4].setAxis(Vec3(0,1,0));
st_ankle_l[5].setFunction(new MultiplierFunction(new Constant(0), 0.96673));
st_ankle_l[5].setAxis(Vec3(0,0,1));
ankle_l = new CustomJoint("ankle_l", *tibia_l, Vec3(0,-0.41569,0), Vec3(0,0,0), *talus_l, Vec3(0,0,0), Vec3(0,0,0),st_ankle_l);
//subtalar_l
SpatialTransform st_subtalar_l;
st_subtalar_l[0].setCoordinateNames(OpenSim::Array<std::string>("subtalar_angle_l", 1, 1));
st_subtalar_l[0].setFunction(new LinearFunction());
st_subtalar_l[0].setAxis(Vec3(-0.78718,-0.60475,-0.12095));
st_subtalar_l[1].setFunction(new Constant(0));
st_subtalar_l[1].setAxis(Vec3(0,1,0));
st_subtalar_l[2].setFunction(new Constant(0));
st_subtalar_l[2].setAxis(Vec3(-0.12095,0,0.78718));
st_subtalar_l[3].setFunction(new MultiplierFunction(new Constant(0), 0.91392));
st_subtalar_l[3].setAxis(Vec3(1,0,0));
st_subtalar_l[4].setFunction(new MultiplierFunction(new Constant(0), 0.91392));
st_subtalar_l[4].setAxis(Vec3(0,1,0));
st_subtalar_l[5].setFunction(new MultiplierFunction(new Constant(0), 0.91392));
st_subtalar_l[5].setAxis(Vec3(0,0,1));
subtalar_l = new CustomJoint("subtalar_l", *talus_l, Vec3(-0.044572,-0.038339,-0.0072383), Vec3(0,0,0), *calcn_l, Vec3(0,0,0), Vec3(0,0,0),st_subtalar_l);
//mtp_l
mtp_l = new WeldJoint("mtp_l", *calcn_l, Vec3(0.16341,-0.0018278,-0.00098704), Vec3(0,0,0), *toes_l, Vec3(0,0,0), Vec3(0,0,0));
//back
SpatialTransform st_back;
st_back[0].setCoordinateNames(OpenSim::Array<std::string>("lumbar_extension", 1, 1));
st_back[0].setFunction(new LinearFunction());
st_back[0].setAxis(Vec3(0,0,1));
st_back[1].setCoordinateNames(OpenSim::Array<std::string>("lumbar_bending", 1, 1));
st_back[1].setFunction(new LinearFunction());
st_back[1].setAxis(Vec3(1,0,0));
st_back[2].setCoordinateNames(OpenSim::Array<std::string>("lumbar_rotation", 1, 1));
st_back[2].setFunction(new LinearFunction());
st_back[2].setAxis(Vec3(0,1,0));
st_back[3].setFunction(new MultiplierFunction(new Constant(0), 0.96574));
st_back[3].setAxis(Vec3(1,0,0));
st_back[4].setFunction(new MultiplierFunction(new Constant(0), 0.96574));
st_back[4].setAxis(Vec3(0,1,0));
st_back[5].setFunction(new MultiplierFunction(new Constant(0), 0.986));
st_back[5].setAxis(Vec3(0,0,1));
back = new CustomJoint("back", *pelvis, Vec3(-0.09725,0.078708,0), Vec3(0,0,0), *torso, Vec3(0,0,0), Vec3(0,0,0),st_back);
//shoulder_r
SpatialTransform st_shoulder_r;
st_shoulder_r[0].setCoordinateNames(OpenSim::Array<std::string>("arm_flex_r", 1, 1));
st_shoulder_r[0].setFunction(new LinearFunction());
st_shoulder_r[0].setAxis(Vec3(0,0,1));
st_shoulder_r[1].setCoordinateNames(OpenSim::Array<std::string>("arm_add_r", 1, 1));
st_shoulder_r[1].setFunction(new LinearFunction());
st_shoulder_r[1].setAxis(Vec3(1,0,0));
st_shoulder_r[2].setCoordinateNames(OpenSim::Array<std::string>("arm_rot_r", 1, 1));
st_shoulder_r[2].setFunction(new LinearFunction());
st_shoulder_r[2].setAxis(Vec3(0,1,0));
st_shoulder_r[3].setFunction(new MultiplierFunction(new Constant(0), 0.89201));
st_shoulder_r[3].setAxis(Vec3(1,0,0));
st_shoulder_r[4].setFunction(new MultiplierFunction(new Constant(0), 0.95783));
st_shoulder_r[4].setAxis(Vec3(0,1,0));
st_shoulder_r[5].setFunction(new MultiplierFunction(new Constant(0), 0.89201));
st_shoulder_r[5].setAxis(Vec3(0,0,1));
shoulder_r = new CustomJoint("shoulder_r", *torso, Vec3(0.0028143,0.35583,0.15164), Vec3(0,0,0), *humerus_r, Vec3(0,0,0), Vec3(0,0,0),st_shoulder_r);
//elbow_r
SpatialTransform st_elbow_r;
st_elbow_r[0].setCoordinateNames(OpenSim::Array<std::string>("elbow_flex_r", 1, 1));
st_elbow_r[0].setFunction(new LinearFunction());
st_elbow_r[0].setAxis(Vec3(0.22605,0.022269,0.97386));
st_elbow_r[1].setFunction(new Constant(0));
st_elbow_r[1].setAxis(Vec3(0,1,0));
st_elbow_r[2].setFunction(new Constant(0));
st_elbow_r[2].setAxis(Vec3(0.97386,0,-0.22605));
st_elbow_r[3].setFunction(new MultiplierFunction(new Constant(0), 1.0275));
st_elbow_r[3].setAxis(Vec3(1,0,0));
st_elbow_r[4].setFunction(new MultiplierFunction(new Constant(0), 1.0275));
st_elbow_r[4].setAxis(Vec3(0,1,0));
st_elbow_r[5].setFunction(new MultiplierFunction(new Constant(0), 1.0275));
st_elbow_r[5].setAxis(Vec3(0,0,1));
elbow_r = new CustomJoint("elbow_r", *humerus_r, Vec3(0.013506,-0.29416,-0.0098593), Vec3(0,0,0), *ulna_r, Vec3(0,0,0), Vec3(0,0,0),st_elbow_r);
//radioulnar_r
SpatialTransform st_radioulnar_r;
st_radioulnar_r[0].setCoordinateNames(OpenSim::Array<std::string>("pro_sup_r", 1, 1));
st_radioulnar_r[0].setFunction(new LinearFunction());
st_radioulnar_r[0].setAxis(Vec3(0.056398,0.99841,0.001952));
st_radioulnar_r[1].setFunction(new Constant(0));
st_radioulnar_r[1].setAxis(Vec3(0,1,0));
st_radioulnar_r[2].setFunction(new Constant(0));
st_radioulnar_r[2].setAxis(Vec3(0.001952,0,-0.056398));
st_radioulnar_r[3].setFunction(new MultiplierFunction(new Constant(0), 0.98133));
st_radioulnar_r[3].setAxis(Vec3(1,0,0));
st_radioulnar_r[4].setFunction(new MultiplierFunction(new Constant(0), 0.98133));
st_radioulnar_r[4].setAxis(Vec3(0,1,0));
st_radioulnar_r[5].setFunction(new MultiplierFunction(new Constant(0), 0.98133));
st_radioulnar_r[5].setAxis(Vec3(0,0,1));
radioulnar_r = new CustomJoint("radioulnar_r", *ulna_r, Vec3(-0.0066014,-0.012764,0.025596), Vec3(0,0,0), *radius_r, Vec3(0,0,0), Vec3(0,0,0),st_radioulnar_r);
//radius_hand_r
radius_hand_r = new WeldJoint("radius_hand_r", *radius_r, Vec3(-0.0086328,-0.23144,0.013356), Vec3(0,0,0), *hand_r, Vec3(0,0,0), Vec3(0,0,0));
//shoulder_l
SpatialTransform st_shoulder_l;
st_shoulder_l[0].setCoordinateNames(OpenSim::Array<std::string>("arm_flex_l", 1, 1));
st_shoulder_l[0].setFunction(new LinearFunction());
st_shoulder_l[0].setAxis(Vec3(0,0,1));
st_shoulder_l[1].setCoordinateNames(OpenSim::Array<std::string>("arm_add_l", 1, 1));
st_shoulder_l[1].setFunction(new LinearFunction());
st_shoulder_l[1].setAxis(Vec3(-1,0,0));
st_shoulder_l[2].setCoordinateNames(OpenSim::Array<std::string>("arm_rot_l", 1, 1));
st_shoulder_l[2].setFunction(new LinearFunction());
st_shoulder_l[2].setAxis(Vec3(0,-1,0));
st_shoulder_l[3].setFunction(new MultiplierFunction(new Constant(0), 0.89201));
st_shoulder_l[3].setAxis(Vec3(1,0,0));
st_shoulder_l[4].setFunction(new MultiplierFunction(new Constant(0), 0.95783));
st_shoulder_l[4].setAxis(Vec3(0,1,0));
st_shoulder_l[5].setFunction(new MultiplierFunction(new Constant(0), 0.89201));
st_shoulder_l[5].setAxis(Vec3(0,0,1));
shoulder_l = new CustomJoint("shoulder_l", *torso, Vec3(0.0028143,0.35583,-0.15164), Vec3(0,0,0), *humerus_l, Vec3(0,0,0), Vec3(0,0,0),st_shoulder_l);
//elbow_l
SpatialTransform st_elbow_l;
st_elbow_l[0].setCoordinateNames(OpenSim::Array<std::string>("elbow_flex_l", 1, 1));
st_elbow_l[0].setFunction(new LinearFunction());
st_elbow_l[0].setAxis(Vec3(-0.22605,-0.022269,0.97386));
st_elbow_l[1].setFunction(new Constant(0));
st_elbow_l[1].setAxis(Vec3(0,1,0));
st_elbow_l[2].setFunction(new Constant(0));
st_elbow_l[2].setAxis(Vec3(0.97386,0,0.22605));
st_elbow_l[3].setFunction(new MultiplierFunction(new Constant(0), 1.0275));
st_elbow_l[3].setAxis(Vec3(1,0,0));
st_elbow_l[4].setFunction(new MultiplierFunction(new Constant(0), 1.0275));
st_elbow_l[4].setAxis(Vec3(0,1,0));
st_elbow_l[5].setFunction(new MultiplierFunction(new Constant(0), 1.0275));
st_elbow_l[5].setAxis(Vec3(0,0,1));
elbow_l = new CustomJoint("elbow_l", *humerus_l, Vec3(0.013506,-0.29416,0.0098593), Vec3(0,0,0), *ulna_l, Vec3(0,0,0), Vec3(0,0,0),st_elbow_l);
//radioulnar_l
SpatialTransform st_radioulnar_l;
st_radioulnar_l[0].setCoordinateNames(OpenSim::Array<std::string>("pro_sup_l", 1, 1));
st_radioulnar_l[0].setFunction(new LinearFunction());
st_radioulnar_l[0].setAxis(Vec3(-0.056398,-0.99841,0.001952));
st_radioulnar_l[1].setFunction(new Constant(0));
st_radioulnar_l[1].setAxis(Vec3(0,1,0));
st_radioulnar_l[2].setFunction(new Constant(0));
st_radioulnar_l[2].setAxis(Vec3(0.001952,0,0.056398));
st_radioulnar_l[3].setFunction(new MultiplierFunction(new Constant(0), 0.98133));
st_radioulnar_l[3].setAxis(Vec3(1,0,0));
st_radioulnar_l[4].setFunction(new MultiplierFunction(new Constant(0), 0.98133));
st_radioulnar_l[4].setAxis(Vec3(0,1,0));
st_radioulnar_l[5].setFunction(new MultiplierFunction(new Constant(0), 0.98133));
st_radioulnar_l[5].setAxis(Vec3(0,0,1));
radioulnar_l = new CustomJoint("radioulnar_l", *ulna_l, Vec3(-0.0066014,-0.012764,-0.025596), Vec3(0,0,0), *radius_l, Vec3(0,0,0), Vec3(0,0,0),st_radioulnar_l);
//radius_hand_l
radius_hand_l = new WeldJoint("radius_hand_l", *radius_l, Vec3(-0.0086328,-0.23144,-0.013356), Vec3(0,0,0), *hand_l, Vec3(0,0,0), Vec3(0,0,0));
/// Add joints
model->addJoint(ground_pelvis);
model->addJoint(hip_l);
model->addJoint(hip_r);
model->addJoint(knee_l);
model->addJoint(knee_r);
model->addJoint(ankle_l);
model->addJoint(ankle_r);
model->addJoint(subtalar_l);
model->addJoint(subtalar_r);
model->addJoint(mtp_l);
model->addJoint(mtp_r);
model->addJoint(back);
model->addJoint(shoulder_l);
model->addJoint(shoulder_r);
model->addJoint(elbow_l);
model->addJoint(elbow_r);
model->addJoint(radioulnar_l);
model->addJoint(radioulnar_r);
model->addJoint(radius_hand_l);
model->addJoint(radius_hand_r);
